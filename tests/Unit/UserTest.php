<?php

namespace Tests\Unit;

use Anacreation\Etvtest\Models\Attempt;
use Anacreation\Etvtest\Models\Test;
use App\Collection;
use App\Event;
use App\EventActivity;
use App\Lesson;
use App\Permission;
use App\Role;
use App\Setting;
use App\User;
use Carbon\Carbon;
use DB;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Tests\TestCase;

class UserTest extends TestCase
{
    use DatabaseMigrations;

    protected function setUp() {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->permission = factory(Permission::class)->create();
        factory(Permission::class)->create();
        $role = factory(Role::class)->create();
        $role->permissions()->save($this->permission);
        $this->user = factory(User::class)->create([
            'is_approved' => true,
            'is_verified' => true,
        ]);
        factory(User::class)->create([
            'is_approved' => false,
            'is_verified' => true,
        ]);

        $this->notVerified = factory(User::class)->create([
            'is_approved' => true,
            'is_verified' => false,
        ]);

        factory(User::class)->create([
            'is_approved' => false,
            'is_verified' => false,
        ]);
        $this->user->roles()->save($role);

        $this->lessons = factory(Lesson::class, 5)->create([
            'permission_id' => $this->permission->id
        ]);
        $this->lessons = factory(Lesson::class, 2)->create([
            'permission_id' => 1001
        ]);

        $this->collections = factory(Collection::class, 3)->create([
            'permission_id' => $this->permission->id
        ]);

        factory(Collection::class, 2)->create([
            'permission_id' => 1002
        ]);

        $passingRate = new Setting();
        $passingRate->label = "test_passing_rate";
        $passingRate->code = "test_passing_rate";
        $passingRate->value = "70";
        $passingRate->save();

    }

    public function test_get_available_lessons_attribute() {

        $lessons = $this->user->availableLessons;

        $this->assertEquals(5, $lessons->count());
    }

    public function test_get_available_lessons_attribute_without_permission() {

        $collections = $this->user->Collections;

        $this->assertEquals(3, $collections->count());
    }

    public function test_get_permissions_attribute() {
        $permission = $this->user->permissions;
        $this->assertEquals(1, $permission->count());
        $this->assertEquals($this->permission->id, $permission->first()->id);
    }

    public function test_get_active_user() {
        $activeUser = User::isActive()->get();

        $this->assertEquals(1, $activeUser->count());
        $this->assertEquals($this->user->id, $activeUser->first()->id);

    }

    public function test_verify() {

        $this->notVerified->verify();

        $this->assertDatabaseHas("users", [
            'id'          => $this->notVerified->id,
            'is_verified' => true
        ]);
    }

    public function test_pass_collection_with_collection_lessons_has_test_but_no_attempt(
    ) {
        $collectionMockery = \Mockery::mock(Collection::class);

        $collectionMockery->shouldReceive('load')->once();
        $collectionMockery->shouldReceive('isPassAllLessonsTest')->once()
                          ->andReturn(true);
        $collectionMockery->shouldReceive('isPassCollectionTests')->once();
        $this->app->instance(Collection::class, $collectionMockery);

        $this->user->passCollection(app(Collection::class));
    }

    public function test_pass_collection_with_collection_lessons_has_test_but_failed_attempt(
    ) {
        $collectionMockery = \Mockery::mock(Collection::class);

        $collectionMockery->shouldReceive('load')->once();
        $collectionMockery->shouldReceive('isPassAllLessonsTest')->once()
                          ->andReturn(false);
        $this->app->instance(Collection::class, $collectionMockery);

        $this->assertFalse($this->user->passCollection(app(Collection::class)));
    }

    public function test_pass_collection_with_collection_lessons_and_pass_all(
    ) {
        $collectionMockery = \Mockery::mock(Collection::class);

        $collectionMockery->shouldReceive('load')->once();
        $collectionMockery->shouldReceive('isPassAllLessonsTest')->once()
                          ->andReturn(true);
        $collectionMockery->shouldReceive('isPassCollectionTests')->once()
                          ->andReturn(true);
        $this->app->instance(Collection::class, $collectionMockery);

        $this->assertTrue($this->user->passCollection(app(Collection::class)));
    }

    public function test_pass_collection_with_pass_all_collection_lessons_but_not_collection(
    ) {
        $collectionMockery = \Mockery::mock(Collection::class);

        $collectionMockery->shouldReceive('load')->once();
        $collectionMockery->shouldReceive('isPassAllLessonsTest')->once()
                          ->andReturn(true);
        $collectionMockery->shouldReceive('isPassCollectionTests')->once()
                          ->andReturn(false);
        $this->app->instance(Collection::class, $collectionMockery);

        $this->assertFalse($this->user->passCollection(app(Collection::class)));
    }

    public function test_pass_collection_with_pass_all_collection_and_lessons_tests(
    ) {
        $collectionMockery = \Mockery::mock(Collection::class);

        $collectionMockery->shouldReceive('load')->once();
        $collectionMockery->shouldReceive('isPassAllLessonsTest')->once()
                          ->andReturn(true);
        $collectionMockery->shouldReceive('isPassCollectionTests')->once()
                          ->andReturn(true);
        $this->app->instance(Collection::class, $collectionMockery);

        $this->assertTrue($this->user->passCollection(app(Collection::class)));
    }

    public function test_pass_collection_both_collection_and_lesson_has_no_test(
    ) {
        $this->lessons->each(function (Lesson $lesson) {
            $this->collections->first()->lessons()->save($lesson);
        });

        $this->assertTrue($this->user->passCollection($this->collections->first()),
            "all collection and lesson has no test");
    }

    public function test_pass_collection_with_no_collection_pass_to_method() {
        $this->assertFalse($this->user->passCollection(),
            "no collection to check");
    }

    public function test_user_register_event_with_permission_and_vacancy() {
        $event = factory(Event::class)->create([
            'permission_id' => $this->permission->id
        ]);

        $this->assertTrue($this->user->registerEvent($event));
    }

    public function test_user_register_event_with_permission_but_no_vacancy() {
        $event = factory(Event::class)->create([
            'permission_id' => $this->permission->id,
            'vacancies'     => 0
        ]);

        $this->assertFalse($this->user->registerEvent($event));
    }

    public function test_user_register_event_with_no_permission() {
        $event = factory(Event::class)->create([
            'permission_id' => $this->permission->id + 1,
        ]);

        $this->assertFalse($this->user->registerEvent($event));
    }

    public function test_user_has_registered_event_and_resubmit() {

        $event = factory(Event::class)->create([
            'title'         => $this->permission->id,
            'permission_id' => $this->permission->id,
        ]);

        DB::table('event_user')->insert([
            'user_id'  => $this->user->id,
            'event_id' => $event->id,
        ]);

        $this->assertFalse($this->user->registerEvent($event));
    }

    public function test_get_latest_passed_attempts_for_a_test() {

        $test = factory(Test::class)->create();

        factory(Attempt::class, 10)->create([
            'user_id' => $this->user->id,
            'test_id' => $test->id,
            'score'   => 0.1,
        ])->each(function ($attempt, $index) {
            $attempt->score = (10 - $index) / 10;
            $attempt->save();
        });

        $this->assertEquals(3,
            $this->user->latestPassedAttempts($test)->count());
    }

    public function test_get_event_sign_in_record() {
        $event = factory(Event::class)->create([
            'permission_id' => $this->permission->id
        ]);

        $activity1 = factory(EventActivity::class)->create([
            'user_id'    => $this->user->id,
            'event_id'   => $event->id,
            'type'       => 'singin',
            'created_at' => Carbon::now()
        ]);

        $activity2 = factory(EventActivity::class)->create([
            'user_id'    => $this->user->id,
            'event_id'   => $event->id,
            'type'       => 'singin',
            'created_at' => Carbon::now()->addHour()
        ]);

        $this->assertEquals($activity2->id,
            $this->user->getEventSingInRecord($event)->id);

    }

    public function test_get_event_sign_in_record_but_no_record() {
        $event = factory(Event::class)->create([
            'permission_id' => $this->permission->id
        ]);

        $this->assertEquals(null,
            $this->user->getEventSingInRecord($event));

    }

    public function test_show_event_singin_timestamp() {
        $event = factory(Event::class)->create([
            'permission_id' => $this->permission->id
        ]);

        $activity1 = factory(EventActivity::class)->create([
            'user_id'  => $this->user->id,
            'event_id' => $event->id,
            'type'     => 'singin'
        ]);

        $this->assertEquals($activity1->created_at,
            $this->user->showEventSingInTimestamp($event));

    }

    public function test_show_event_singin_timestamp_but_no_record() {
        $event = factory(Event::class)->create([
            'permission_id' => $this->permission->id
        ]);

        $this->assertEquals(null,
            $this->user->showEventSingInTimestamp($event));

    }

    public function test_get_google_map_url_for_singIn() {
        $event = factory(Event::class)->create([
            'permission_id' => $this->permission->id
        ]);

        $activity = factory(EventActivity::class)->create([
            'user_id'   => $this->user->id,
            'event_id'  => $event->id,
            'type'      => 'singin',
            'longitude' => "22.3964",
            'latitude'  => "114.1095",
        ]);

        $lon = number_format((float)$activity->longitude, 6);
        $lat = number_format((float)$activity->latitude, 6);
        $this->assertEquals("http://maps.google.com/maps?q=loc:{$lon},{$lat}&z=17",
            $this->user->getGoogleMapUrlForSingIn($event));

    }

    public function test_get_google_map_url_for_singIn_no_geo_data() {
        $event = factory(Event::class)->create([
            'permission_id' => $this->permission->id
        ]);

        factory(EventActivity::class)->create([
            'user_id'   => $this->user->id,
            'event_id'  => $event->id,
            'type'      => 'singin',
            'longitude' => null,
            'latitude'  => null,
        ]);

        $this->assertEquals(null,
            $this->user->getGoogleMapUrlForSingIn($event));

    }

    public function test_get_google_map_url_for_singIn_no_record() {
        $event = factory(Event::class)->create([
            'permission_id' => $this->permission->id
        ]);

        $this->assertEquals(null,
            $this->user->getGoogleMapUrlForSingIn($event));

    }
}
