<?php

namespace Tests\Feature;

use Anacreation\MultiAuth\Model\Admin;
use Anacreation\MultiAuth\Model\AdminPermission;
use Anacreation\MultiAuth\Model\AdminRole;
use App\User;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Tests\TestCase;

class AdminShowUserPageTest extends TestCase
{
    use DatabaseMigrations;

    protected function setUp() {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = $this->createActiveUser();
        $this->admin = $this->createAdminWithPermission('showUser');
    }

    public function test_call_is_successful() {
        $this->actingAs($this->admin, 'admin');
        $response = $this->get(route("users.show",$this->user->id));
        $response->assertStatus(200);
    }

    public function test_call_is_show_as_view() {
        $this->actingAs($this->admin, 'admin');
        $response = $this->get("/admin/users/{$this->user->id}");
        $response->assertViewIs('users.show');
    }

    public function test_call_return_a_user() {
        $this->actingAs($this->admin, 'admin');
        $response = $this->get("/admin/users/{$this->user->id}");

        $response->assertViewHas("user");
    }

    private function createAdminWithPermission(string $permissionCode): Admin {
        $adminPermission = factory(AdminPermission::class)->create([
            'code' => $permissionCode
        ]);

        $adminRole = factory(AdminRole::class)->create();
        $adminRole->permissions()->save($adminPermission);

        $admin = factory(Admin::class)->create();

        $admin->roles()->save($adminRole);

        return $admin;
    }

    private function createActiveUser(): User {
        return factory(User::class)->create([
            'is_verified' => true,
            'is_approved' => true,
        ]);
    }
}
